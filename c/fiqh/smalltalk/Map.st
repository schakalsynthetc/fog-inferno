'From Squeak5.0 of 6 August 2015 [latest update: #15113] on 21 April 2019 at 3:14:01 pm'!MethodDictionary variableSubclass: #Map	instanceVariableNames: 't zero left right'	classVariableNames: ''	poolDictionaries: ''	category: 'fith-map'!!Map commentStamp: '<historical>' prior: 0!# Map ##!!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 20:18'!absent: anObject	"called when anObject matches no key."! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 6/21/2014 09:31'!arrayClass	^ FithArray! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 8/10/2015 03:44'!doesNotUnderstand: msg	msg numArgs = 0 		ifTrue: [^ self at: msg selector ifAbsent: [^self reallyDoesNotUnderstand: msg]].	msg numArgs = 1		ifTrue: [^ self at: msg selector put: msg arguments first].	^ self reallyDoesNotUnderstand: msg! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 20:19'!empty: index	"called when index is empty, subclasses can specialize the behavior"! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 21:00'!initialize	super initialize.	t := Xt new it: self.	self zero: nil; left: Left; right: Right; yourself.	! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 5/25/2015 21:16'!left	^ left! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 5/25/2015 21:17'!left: anObj	^ left := anObj! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 5/25/2015 21:17'!left: leftObj right: rightObj	self left: leftObj; right: rightObj! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 20:58'!p! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 20:58'!p: aCursor! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/18/2018 15:11'!printOn: s	s nextPutAll: '', (self hash printStringBase: 16 nDigits: 8), ' /Map/t' ! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 5/25/2015 21:18'!q	^ self array! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 5/25/2015 21:19'!r	^ (FithArray new: self size) withIndexCollect: [:it :i | self at: i ]! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 5/25/2015 21:16'!right	^ right! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 5/25/2015 21:17'!right: anObj	^ right := anObj! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 20:56'!scanFor: anObject	"Scan the key array for the first slot containing either a nil (indicating an empty slot) or an element that matches anObject. Answer the index of that slot or raise an error if no slot is found. This method will be overridden in various subclasses that have different interpretations for matching elements."	| index start |	anObject ifNil: [^ 0]. anObject == 0 ifTrue: [^ 0]. "returns 0 to basicAt: which calls zero"	index := start := anObject identityHash \\ array size + 1.	[ 		| element |		((element := self basicAt: index) == nil or: [ element == anObject ])			ifTrue: [ ^index ].		(index := index \\ array size + 1) = start ] whileFalse.		self errorNoFreeSpace! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/18/2018 11:21'!t	^ t! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 20:59'!zero	^ zero! !!Map methodsFor: 'as yet unclassified' stamp: 'jkl 7/13/2018 20:59'!zero: anObj	zero := anObj.! !!Map methodsFor: 'fith-map' stamp: 'jkl 6/21/2014 08:49'!at: key msg: msg	^ self at: msg r ifAbsent: (self at: key r ifAbsent: key r)! !!Map methodsFor: 'fith-map' stamp: 'jkl 6/22/2014 12:08'!at: key put: val msg: msg	| keys |	keys := msg selector keywords.	1 to: keys size do: [:i | self at: (keys at: i) put: (msg arguments at: i) r]! !